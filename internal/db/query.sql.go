// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"net/netip"
	"time"

	"github.com/google/uuid"
)

const createAuth = `-- name: CreateAuth :one

INSERT INTO auths 
  (id, guid, refresh_token_hash, ip_address, user_agent, refreshed_at)
VALUES 
  ($1, $2, $3, $4, $5, $6)
RETURNING id, guid, refresh_token_hash, ip_address, user_agent, refreshed_at, created_at
`

type CreateAuthParams struct {
	ID               uuid.UUID  `json:"id"`
	Guid             string     `json:"guid"`
	RefreshTokenHash string     `json:"refresh_token_hash"`
	IpAddress        netip.Addr `json:"ip_address"`
	UserAgent        string     `json:"user_agent"`
	RefreshedAt      time.Time  `json:"refreshed_at"`
}

// noinspection SqlResolveForFile
func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) (Auth, error) {
	row := q.db.QueryRow(ctx, createAuth,
		arg.ID,
		arg.Guid,
		arg.RefreshTokenHash,
		arg.IpAddress,
		arg.UserAgent,
		arg.RefreshedAt,
	)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.RefreshTokenHash,
		&i.IpAddress,
		&i.UserAgent,
		&i.RefreshedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAuthById = `-- name: DeleteAuthById :exec
DELETE FROM auths WHERE id = $1
`

func (q *Queries) DeleteAuthById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAuthById, id)
	return err
}

const getAuthById = `-- name: GetAuthById :one
SELECT id, guid, refresh_token_hash, ip_address, user_agent, refreshed_at, created_at FROM auths WHERE id = $1
`

func (q *Queries) GetAuthById(ctx context.Context, id uuid.UUID) (Auth, error) {
	row := q.db.QueryRow(ctx, getAuthById, id)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.RefreshTokenHash,
		&i.IpAddress,
		&i.UserAgent,
		&i.RefreshedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateAuthRefreshToken = `-- name: UpdateAuthRefreshToken :exec
UPDATE auths SET refresh_token_hash = $1, refreshed_at = NOW() WHERE id = $2
`

type UpdateAuthRefreshTokenParams struct {
	RefreshTokenHash string    `json:"refresh_token_hash"`
	ID               uuid.UUID `json:"id"`
}

func (q *Queries) UpdateAuthRefreshToken(ctx context.Context, arg UpdateAuthRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, updateAuthRefreshToken, arg.RefreshTokenHash, arg.ID)
	return err
}
